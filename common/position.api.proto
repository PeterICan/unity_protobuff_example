syntax = "proto3";
package json_api;

option go_package = "/.;json_api";

// 說明：
// 這個 .proto 檔案定義了 JSON/WebSocket API 的訊息結構。
// 每個 C2S 訊息都包含路由和請求 ID，以便後端進行解析和路由。
// 每個 S2C 訊息也包含這些資訊，以便客戶端進行回應的匹配。
//
// C2S JSON 結構範例:
// {
//   "route": "position/update",
//   "request_id": "client-generated-uuid-123",
//   "x": 10.5,
//   "y": 20.0,
//   "z": 5.1
// }
//
// S2C JSON 結構範例:
// {
//   "route": "position/update",
//   "request_id": "client-generated-uuid-123",
//   "status": "success",
//   "error": null
// }


// --- 通用結構 ---

// 標準的錯誤回應格式
message ErrorResponse {
  int32 code = 1;       // 錯誤碼 (例如 400, 404, 500)
  string message = 2;   // 給開發者看的錯誤訊息
}


// System: position
//
// Actions:
// - update: Updates the player's position.
//   - C2S: C2SPositionUpdate
//   - S2C: S2CPositionUpdate


// --- 位置更新功能 (Position) ---

// C2S (Client to Server)
message C2SPositionUpdate {
  string route = 1;      // 路由，值應為 "position/update"
  // string request_id = 2; // 客戶端生成的唯一請求 ID (暫時禁用，待後續實作)
  float x = 3;
  float y = 4;
  float z = 5;
}

// S2C (Server to Client)
message S2CPositionUpdate {
  string route = 1;      // 對應請求的路由
  // string request_id = 2; // 對應請求的 ID (暫時禁用，待後續實作)
  string status = 3;     // 例如 "success" 或 "failed"
  ErrorResponse error = 4; // 若成功則為 null
}